<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>ECE297 Storage Server: server.c Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">ECE297 Storage Server
   &#160;<span id="projectnumber">0.2</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.1.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.html">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">server.c</div>  </div>
</div><!--header-->
<div class="contents">
<a href="server_8c.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;sys/types.h&gt;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;sys/socket.h&gt;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;arpa/inet.h&gt;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;netdb.h&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;string.h&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;assert.h&gt;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;signal.h&gt;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_8h.html" title="This file declares various utility functions that are can be used by the storage server and client li...">utils.h</a>&quot;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;time.h&gt;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="code" href="server_8c.html#a36b090ddf192f97d9fecf8ff5a98996e">   25</a></span>&#160;<span class="preprocessor">#define MAX_LISTENQUEUELEN 20   </span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00034"></a><span class="lineno"><a class="code" href="server_8c.html#a94a11842e987c681b4f881460900b7d3">   34</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="server_8c.html#a94a11842e987c681b4f881460900b7d3" title="Process a command from the client.">handle_command</a>(<span class="keywordtype">int</span> sock, <span class="keywordtype">char</span> *cmd)</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <a class="code" href="utils_8c.html#a9e4d8cb085fc7d5c9093ee102fa886d1" title="Generates a log message.">logger</a>(server_log,(<span class="stringliteral">&quot;Processing command &#39;%s&#39;\n&quot;</span>, cmd)); <span class="comment">// replace LOG commands with logger() calls</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="comment">// For now, just send back the command to the client.</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <a class="code" href="utils_8c.html#a73c4a410d877b6a9358c547786f2102c" title="Keep sending the contents of the buffer until complete.">sendall</a>(sock, cmd, strlen(cmd));</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <a class="code" href="utils_8c.html#a73c4a410d877b6a9358c547786f2102c" title="Keep sending the contents of the buffer until complete.">sendall</a>(sock, <span class="stringliteral">&quot;\n&quot;</span>, 1);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="code" href="server_8c.html#a0ddf1224851353fc92bfbff6f499fa97">   52</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="client_8c.html#a0ddf1224851353fc92bfbff6f499fa97" title="Start a client to interact with the storage server.">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="comment">// Starting a new log</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        open_server_log();</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="comment">// Process command line arguments.</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="comment">// This program expects exactly one argument: the config file name.</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        assert(argc &gt; 0);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">if</span> (argc != 2) {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                printf(<span class="stringliteral">&quot;Usage %s &lt;config_file&gt;\n&quot;</span>, argv[0]);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                exit(EXIT_FAILURE);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordtype">char</span> *config_file = argv[1];</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="comment">// Read the config file.</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">struct </span><a class="code" href="structconfig__params.html" title="A struct to store config parameters.">config_params</a> params;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordtype">int</span> status = <a class="code" href="utils_8c.html#ae885a5871d260ab51ce6a9156f41f07e" title="Read and load configuration parameters.">read_config</a>(config_file, &amp;params);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">if</span> (status != 0) {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                printf(<span class="stringliteral">&quot;Error processing config file.\n&quot;</span>);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                exit(EXIT_FAILURE);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <a class="code" href="utils_8c.html#a9e4d8cb085fc7d5c9093ee102fa886d1" title="Generates a log message.">logger</a>(server_log,(<span class="stringliteral">&quot;Server on %s:%d\n&quot;</span>, params.<a class="code" href="structconfig__params.html#a962b7bcdbee26333fa776115ed066fb3" title="The hostname of the server.">server_host</a>, params.<a class="code" href="structconfig__params.html#aa7103926e2d35a5d3461a5081723bdcd" title="The listening port of the server.">server_port</a>));</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="comment">// Create a socket.</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordtype">int</span> listensock = socket(PF_INET, SOCK_STREAM, 0);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">if</span> (listensock &lt; 0) {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                printf(<span class="stringliteral">&quot;Error creating socket.\n&quot;</span>);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                exit(EXIT_FAILURE);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="comment">// Allow listening port to be reused if defunct.</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordtype">int</span> yes = 1;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        status = setsockopt(listensock, SOL_SOCKET, SO_REUSEADDR, &amp;yes, <span class="keyword">sizeof</span> yes);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">if</span> (status != 0) {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                printf(<span class="stringliteral">&quot;Error configuring socket.\n&quot;</span>);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                exit(EXIT_FAILURE);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="comment">// Bind it to the listening port.</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keyword">struct </span>sockaddr_in listenaddr;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        memset(&amp;listenaddr, 0, <span class="keyword">sizeof</span> listenaddr);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        listenaddr.sin_family = AF_INET;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        listenaddr.sin_port = htons(params.<a class="code" href="structconfig__params.html#aa7103926e2d35a5d3461a5081723bdcd" title="The listening port of the server.">server_port</a>);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        inet_pton(AF_INET, params.<a class="code" href="structconfig__params.html#a962b7bcdbee26333fa776115ed066fb3" title="The hostname of the server.">server_host</a>, &amp;(listenaddr.sin_addr)); <span class="comment">// bind to local IP address</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        status = bind(listensock, (<span class="keyword">struct</span> sockaddr*) &amp;listenaddr, <span class="keyword">sizeof</span> listenaddr);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">if</span> (status != 0) {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                printf(<span class="stringliteral">&quot;Error binding socket.\n&quot;</span>);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                exit(EXIT_FAILURE);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="comment">// Listen for connections.</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        status = listen(listensock, <a class="code" href="server_8c.html#a36b090ddf192f97d9fecf8ff5a98996e" title="The maximum number of queued connections.">MAX_LISTENQUEUELEN</a>);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">if</span> (status != 0) {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                printf(<span class="stringliteral">&quot;Error listening on socket.\n&quot;</span>);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                exit(EXIT_FAILURE);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="comment">// Listen loop.</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordtype">int</span> wait_for_connections = 1;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">while</span> (wait_for_connections) {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <span class="comment">// Wait for a connection.</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="keyword">struct </span>sockaddr_in clientaddr;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                socklen_t clientaddrlen = <span class="keyword">sizeof</span> clientaddr;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="keywordtype">int</span> clientsock = accept(listensock, (<span class="keyword">struct</span> sockaddr*)&amp;clientaddr, &amp;clientaddrlen);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">if</span> (clientsock &lt; 0) {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                        printf(<span class="stringliteral">&quot;Error accepting a connection.\n&quot;</span>);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                        exit(EXIT_FAILURE);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <a class="code" href="utils_8c.html#a9e4d8cb085fc7d5c9093ee102fa886d1" title="Generates a log message.">logger</a>(server_log,(<span class="stringliteral">&quot;Got a connection from %s:%d.\n&quot;</span>, inet_ntoa(clientaddr.sin_addr), clientaddr.sin_port));</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="comment">// Get commands from client.</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="keywordtype">int</span> wait_for_commands = 1;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keywordflow">do</span> {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                        <span class="comment">// Read a line from the client.</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                        <span class="keywordtype">char</span> cmd[<a class="code" href="utils_8h.html#a1eb73c104b484cf18752169509cebfe2" title="The max length in bytes of a command from the client to the server.">MAX_CMD_LEN</a>];</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        <span class="keywordtype">int</span> status = <a class="code" href="utils_8c.html#ab126c8228ad72abbaed5f282709446ab" title="Receive an entire line from a socket.">recvline</a>(clientsock, cmd, <a class="code" href="utils_8h.html#a1eb73c104b484cf18752169509cebfe2" title="The max length in bytes of a command from the client to the server.">MAX_CMD_LEN</a>);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        <span class="keywordflow">if</span> (status != 0) {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                <span class="comment">// Either an error occurred or the client closed the connection.</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                                wait_for_commands = 0;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                                <span class="comment">// Handle the command from the client.</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                                <span class="keywordtype">int</span> status = <a class="code" href="server_8c.html#a94a11842e987c681b4f881460900b7d3" title="Process a command from the client.">handle_command</a>(clientsock, cmd);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                <span class="keywordflow">if</span> (status != 0)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                        wait_for_commands = 0; <span class="comment">// Oops.  An error occured.</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                        }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                } <span class="keywordflow">while</span> (wait_for_commands);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <span class="comment">// Close the connection with the client.</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                close(clientsock);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <a class="code" href="utils_8c.html#a9e4d8cb085fc7d5c9093ee102fa886d1" title="Generates a log message.">logger</a>(server_log,(<span class="stringliteral">&quot;Closed connection from %s:%d.\n&quot;</span>, inet_ntoa(clientaddr.sin_addr), clientaddr.sin_port));</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="comment">// Stop listening for connections.</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        close(listensock);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="comment">// Close log file</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        close_server_log();</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">return</span> EXIT_SUCCESS;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Jan 22 2014 20:16:59 for ECE297 Storage Server by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.1.2
</small></address>
</body>
</html>
